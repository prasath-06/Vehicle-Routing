# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hBiQfboMUgrHe861-7lNFEkiqjLdeHsj
"""

import random
import numpy as np
import matplotlib.pyplot as plt
from deap import base, creator, tools, algorithms

num_locations = 10

locations = [(random.randint(0,100),random.randint(0,100))for _ in range(num_locations)]


depot = (50,50)

num_vehicles =3
print(locations)

creator.create("FitnessMin", base.Fitness, weights=(-1.0,-1.0))
creator.create("Individual", list, fitness=creator.FitnessMin)

#TASK 4 - Starting with the toolbox and tools
toolbox = base.Toolbox()
toolbox.register("indices", random.sample, range(num_locations), num_locations)
toolbox.register("individual",tools.initIterate, creator.Individual,toolbox.indices) #finish defining how to build an individual)
toolbox.register("population",tools.initRepeat,list,toolbox.individual)#finish defining how to build an population)

i = toolbox.individual()
print(i)
#

#SOLUTION CODE


#Fitness Function
def evalVRP(individual):
    total_distance = 0
    distances = []  # Track distance traveled by each vehicle for balance calculation
    # Split the list of locations among vehicles, ensuring each starts and ends at the depot
    for i in range(num_vehicles):

        vehicle_route = [depot] + [locations[individual[j]] for j in range(i, len(individual), num_vehicles)] + [depot]

        # Calculate total distance traveled by this vehicle
        vehicle_distance = sum(np.linalg.norm(np.array(vehicle_route[k+1]) - np.array(vehicle_route[k])) for k in range(len(vehicle_route)-1))

        total_distance += vehicle_distance
        distances.append(vehicle_distance)

    balance_penalty = np.std(distances)  # Use standard deviation of distances as a penalty for imbalance among vehicles
    return total_distance, balance_penalty

evalVRP([2, 4, 5, 1, 8, 6, 9, 0, 3, 7])

# TODO: Task 7 - Configure the genetic operators

toolbox.register("mate", tools.cxPartialyMatched)# Choose and configure a crossover method)
toolbox.register("mutate", tools.mutShuffleIndexes, indpb=0.2)# Choose and configure a mutation method)
toolbox.register("select",tools.selTournament, tournsize=3) # Choose and configure a selection method)
# Register the evaluation function here

#TASK 8 - Plotting Function
def plot_routes(individual, title="Routes"):
    #TODO: Write a function to visualize the routes - just plot the points and lines for each vehicle
    plt.figure()
    for(x,y) in locations:
        plt.scatter(x,y)
    for i in range(num_vehicles):
        vehicle_route = [depot] + [locations[individual[j]] for j in range(i, len(individual), num_vehicles)] + [depot]
        plt.plot(*zip(*vehicle_route), '-', 'rs')

    plt.title(title)
    plt.xlabel('X Coordinate')
    plt.ylabel('Y Coordinate')
    plt.show()
print(plot_routes(toolbox.individual(),title="Routes"))

# Running the Genetic Algorithm
# Running the Genetic Algorithm
def main():
    random.seed(42)  # Seed for reproducibility
    pop = toolbox.population(n=300)  # Generate initial population
    hof = tools.HallOfFame(1)  # Hall of Fame to store the best individual

    # Setup statistics to track
    stats = tools.Statistics(lambda ind: ind.fitness.values)
    stats.register("avg", np.mean)
    stats.register("min", np.min)

    # Run the genetic algorithm
    algorithms.eaSimple(pop, toolbox, 0.7, 0.2, 300, stats=stats, halloffame=hof)

    # Plot the best route found
    plot_routes(hof[0], "Optimal Route")
    return pop, stats, hof

if __name__ == "__main__":
    main()